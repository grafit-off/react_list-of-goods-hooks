{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsWithUniqueID","map","goodsName","name","id","uuidv4","App","useState","NONE","sortType","setSortType","isReversed","setIsReversed","goods","visibleGoods","sort","prevName","currName","ALPHABET","localeCompare","LENGTH","length","reverse","getReorderedGoods","isResetButtonVisible","className","type","classNames","onClick","prevIsReversed","ReactDOM","render","document","getElementById"],"mappings":"6KA8BKA,E,kFALCC,EAlByB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAQiDC,KAAI,SAAAC,GAAS,MAAK,CACnEC,KAAMD,EACNE,GAAIC,mB,SAGDN,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAuCE,IAAMO,EAAU,WACrB,MAAgCC,mBAASR,EAASS,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAhCD,SACLA,EADK,GAGJ,IADCJ,EACF,EADEA,SAAUE,EACZ,EADYA,WAENG,EAAY,YAAOD,GAqBzB,OAnBKd,EAASS,MACZM,EAAaC,MAAK,cAA6C,IAApCC,EAAmC,EAAzCb,KAA0Bc,EAAe,EAArBd,KACvC,OAAQM,GACN,KAAKV,EAASmB,SACZ,OAAOF,EAASG,cAAcF,GAEhC,KAAKlB,EAASqB,OACZ,OAAOJ,EAASK,OAASJ,EAASI,OAEpC,QACE,OAAO,MAKXV,GACFG,EAAaQ,UAGRR,EAOOS,CAAkBvB,EAAmB,CACjDS,WACAE,eAEIa,EAAuBf,IAAaV,EAASS,MAAQG,EAE3D,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CAAE,WAAYlB,IAAaV,EAASmB,WAEtCU,QAAS,kBAAMlB,EAAYX,EAASmB,WAPtC,iCAYA,wBACEQ,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,WAAYlB,IAAaV,EAASqB,SAEtCQ,QAAS,kBAAMlB,EAAYX,EAASqB,SAPtC,4BAYA,wBACEM,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CAAE,YAAahB,IAEjBiB,QAAS,kBAAMhB,GAAc,SAAAiB,GAAc,OAAKA,MAPlD,qBAYCL,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAAS,WACPlB,EAAYX,EAASS,MACrBI,GAAc,IALlB,sBAaJ,6BACE,6BACGC,EAAMZ,KAAI,gBAAGE,EAAH,EAAGA,KAAMC,EAAT,EAASA,GAAT,OACT,oBAAI,UAAQ,OAAZ,SAA6BD,GAALC,cCpIpC0B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.e1dfcedb.chunk.js","sourcesContent":["import { FC, useState } from 'react';\nimport classNames from 'classnames';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\ninterface Goods {\n  name: string;\n  id: string;\n}\n\nconst goodsWithUniqueID: Goods[] = goodsFromServer.map(goodsName => ({\n  name: goodsName,\n  id: uuidv4(),\n}));\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype ReorderOptions = {\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport function getReorderedGoods(\n  goods: Goods[],\n  { sortType, isReversed }: ReorderOptions,\n) {\n  const visibleGoods = [...goods];\n\n  if (!SortType.NONE) {\n    visibleGoods.sort(({ name: prevName }, { name: currName }) => {\n      switch (sortType) {\n        case SortType.ALPHABET:\n          return prevName.localeCompare(currName);\n\n        case SortType.LENGTH:\n          return prevName.length - currName.length;\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: FC = () => {\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const goods = getReorderedGoods(goodsWithUniqueID, {\n    sortType,\n    isReversed,\n  });\n  const isResetButtonVisible = sortType !== SortType.NONE || isReversed;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            { 'is-light': sortType !== SortType.ALPHABET },\n          )}\n          onClick={() => setSortType(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            { 'is-light': sortType !== SortType.LENGTH },\n          )}\n          onClick={() => setSortType(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            { 'is-light': !isReversed },\n          )}\n          onClick={() => setIsReversed(prevIsReversed => !prevIsReversed)}\n        >\n          Reverse\n        </button>\n\n        {isResetButtonVisible && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={() => {\n              setSortType(SortType.NONE);\n              setIsReversed(false);\n            }}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        <ul>\n          {goods.map(({ name, id }) => (\n            <li data-cy=\"Good\" key={id}>{name}</li>\n          ))}\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}